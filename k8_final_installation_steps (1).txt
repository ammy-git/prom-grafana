Master_node

sudo swapoff -a

This command disables swap memory on the system. Kubernetes requires that swap is disabled, so it doesnâ€™t interfere with memory management.

sudo sed -i '/swap/s/^/#/' /etc/fstab

This command comments out the swap entry in /etc/fstab, ensuring that swap won't be enabled after a system reboot. The -i option directly modifies the file.

sudo swapon --show

This command shows any active swap partitions or swap files. After disabling swap, this should return nothing.

sudo hostnamectl set-hostname "k8s-master"

This sets the hostname of the system to k8s-master. The hostname is important because Kubernetes needs to recognize nodes by their hostnames.

exec bash

This reinitializes the shell, ensuring the hostname change takes effect immediately in the current session.

sudo nano /etc/hosts
<master-ip> k8s-master
<worker-ip> k8s-worker

These lines are intended to add entries for the IPs of your master and worker nodes in the /etc/hosts file so that they can be accessed by their respective hostnames.

ping -c 4 k8s-master
ping -c 4 k8s-worker

This sends four ICMP Echo Request packets (a ping) to k8s-master to check if the hostname resolves correctly.

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

This creates a configuration file to ensure the overlay and br_netfilter kernel modules are loaded at boot. These are necessary for Kubernetes networking.
overlay is used for container networking.
br_netfilter ensures that iptables works correctly for bridging.

sudo modprobe overlay
sudo modprobe br_netfilter

These commands immediately load the overlay and br_netfilter modules into the kernel, which are needed for networking.

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward =1
EOF

This command creates a sysctl configuration file that adjusts network settings for Kubernetes:
bridge-nf-call-iptables: Ensures traffic bridging works with iptables.
ip_forward: Enables IP forwarding, required for routing between pods.

sudo sysctl --system

Applies the sysctl settings immediately, ensuring the changes take effect without needing a reboot.

sudo apt update

sudo apt update && sudo apt install -y curl gpg

Updates the package list again and installs curl and gpg, which are used to download and verify the Kubernetes apt repositories and keys.

sudo mkdir -p /etc/apt/keyrings

Creates the directory /etc/apt/keyrings, which will hold the Kubernetes apt signing key.

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc > /dev/null

Downloads the GPG key for the Kubernetes apt repository and saves it in the /etc/apt/keyrings directory for authentication.

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

Adds the Kubernetes apt repository to the system's list of sources, enabling you to install Kubernetes packages like kubeadm, kubelet, and kubectl.

sudo apt update

sudo apt install -y kubeadm=1.32.0-1.1 kubelet=1.32.0-1.1 kubectl=1.32.0-1.1

Installs specific versions of kubeadm, kubelet, and kubectl. These are essential tools for managing a Kubernetes cluster.


sudo apt install docker.io
Installs Docker, which is the container runtime that Kubernetes uses to run containers 

sudo mkdir /etc/containerd
Creates a directory for the containerd configuration file.

sudo sh -c "containerd config default > /etc/containerd/config.toml"
Generates the default containerd configuration file and saves it to /etc/containerd/config.toml.

sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml

Modifies the containerd configuration to use systemd as the cgroup driver, which Kubernetes requires for compatibility with its default configuration
sudo systemctl restart containerd.service
sudo systemctl restart containerd.service
sudo systemctl enable kubelet.service


sudo kubeadm config images pull
Pulls the necessary container images for Kubernetes to run the cluster, such as images for the control plane components 

sudo kubeadm init --pod-network-cidr=10.10.0.0/16
Initializes the Kubernetes master node, using the --pod-network-cidr flag to specify the IP address range for pod networking

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
Installs the Calico operator, which helps manage Calico networking in the Kubernetes cluster.

curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O
Downloads the custom resources for Calico, defining how the network should be set up.

sed -i 's/cidr: 192\.168\.0\.0\/16/cidr: 10.10.0.0\/16/g' custom-resources.yaml
Modifies the Calico configuration to use the pod network CIDR (10.10.0.0/16) to match the one you specified earlier.

kubectl create -f custom-resources.yaml
Applies the Calico configuration to your Kubernetes cluster, setting up the networking with the specified CIDR.

kubectl get nodes 

Check if MasterNode is ready


Worker Node

sudo swapoff -a
sudo sed -i '/swap/s/^/#/' /etc/fstab
sudo swapon --show
sudo hostnamectl set-hostname "k8s-worker"
exec bash


sudo nano /etc/hosts
master-ip k8s-master
worker-ip k8s-worker

ping -c 4 k8s-master
ping -c 4 k8s-worker

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward =1
EOF

sudo sysctl --system

sudo apt update

sudo apt update && sudo apt install -y curl gpg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc > /dev/null
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubeadm=1.32.0-1.1 kubelet=1.32.0-1.1 kubectl=1.32.0-1.1

sudo apt install docker.io
sudo mkdir /etc/containerd
sudo sh -c "containerd config default > /etc/containerd/config.toml"
sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd.service
sudo systemctl restart containerd.service
sudo systemctl enable kubelet.service

run the join command which is recived from installing kubeadm on master node. check kubectl get nodes to verify if all the master and worker nodes are ready
